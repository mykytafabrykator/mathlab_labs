// -------------------------------------------------------------
// 
// File Name: C:\Users\Mykyta\Documents\MATLAB\lab_2\fixed\CALC_MODEL\CALC_MAGNITUDE_AND_PHASE_FIXED_tb.v
// Created: 2022-11-30 19:16:55
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// o_PHASE                       ce_out        1
// o_MAGNITUDE                   ce_out        1
// o_VALID                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CALC_MAGNITUDE_AND_PHASE_FIXED_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CALC_MAGNITUDE_AND_PHASE_FIXED_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire rawData_i_VALID;
  wire o_VALID_done;  // ufix1
  wire rdEnb;
  wire o_VALID_done_enb;  // ufix1
  reg [3:0] o_PHASE_addr;  // ufix4
  wire o_VALID_lastAddr;  // ufix1
  wire resetn;
  reg  check3_done;  // ufix1
  wire o_MAGNITUDE_done;  // ufix1
  wire o_MAGNITUDE_done_enb;  // ufix1
  wire o_MAGNITUDE_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire o_PHASE_done;  // ufix1
  wire o_PHASE_done_enb;  // ufix1
  wire o_PHASE_active;  // ufix1
  reg  holdData_i_VALID;
  reg  i_VALID_offset;
  wire i_VALID_1;
  wire [3:0] Data_Type_Conversion_out1_addr_delay;  // ufix4
  reg  tb_enb_delay;
  reg signed [31:0] fp_i_COMPLEX_VALUE_im;  // sfix32
  reg [31:0] rawData_i_COMPLEX_VALUE_im;  // ufix32_En18
  reg signed [31:0] status_i_COMPLEX_VALUE_im;  // sfix32
  reg [31:0] holdData_i_COMPLEX_VALUE_im;  // ufix32_En18
  reg [31:0] i_COMPLEX_VALUE_im_offset;  // ufix32_En18
  wire [31:0] i_COMPLEX_VALUE_im;  // ufix32_En18
  reg [3:0] Data_Type_Conversion_out1_addr;  // ufix4
  wire Data_Type_Conversion_out1_active;  // ufix1
  wire Data_Type_Conversion_out1_enb;  // ufix1
  reg signed [31:0] fp_i_COMPLEX_VALUE_re;  // sfix32
  reg [31:0] rawData_i_COMPLEX_VALUE_re;  // ufix32_En18
  reg signed [31:0] status_i_COMPLEX_VALUE_re;  // sfix32
  reg [31:0] holdData_i_COMPLEX_VALUE_re;  // ufix32_En18
  reg [31:0] i_COMPLEX_VALUE_re_offset;  // ufix32_En18
  wire [31:0] i_COMPLEX_VALUE_re;  // ufix32_En18
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire [15:0] o_PHASE;  // ufix16_En13
  wire [32:0] o_MAGNITUDE;  // ufix33_En18
  wire o_VALID;
  wire o_PHASE_enb;  // ufix1
  wire o_PHASE_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [15:0] o_PHASE_expected_1;  // ufix16_En13
  wire [15:0] o_PHASE_ref;  // ufix16_En13
  reg  o_PHASE_testFailure;  // ufix1
  wire [32:0] o_MAGNITUDE_expected_1;  // ufix33_En18
  wire [32:0] o_MAGNITUDE_ref;  // ufix33_En18
  reg  o_MAGNITUDE_testFailure;  // ufix1
  wire o_VALID_expected_1;
  wire o_VALID_ref;
  reg  o_VALID_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for i_VALID
  assign rawData_i_VALID = 1'b1;



  assign o_VALID_done_enb = o_VALID_done & rdEnb;



  assign o_VALID_lastAddr = o_PHASE_addr >= 4'b1010;



  assign o_VALID_done = o_VALID_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_3
      if (reset) begin
        check3_done <= 0;
      end
      else begin
        if (o_VALID_done_enb) begin
          check3_done <= o_VALID_done;
        end
      end
    end

  assign o_MAGNITUDE_done_enb = o_MAGNITUDE_done & rdEnb;



  assign o_MAGNITUDE_lastAddr = o_PHASE_addr >= 4'b1010;



  assign o_MAGNITUDE_done = o_MAGNITUDE_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (o_MAGNITUDE_done_enb) begin
          check2_done <= o_MAGNITUDE_done;
        end
      end
    end

  assign o_PHASE_done_enb = o_PHASE_done & rdEnb;



  assign o_PHASE_active = o_PHASE_addr != 4'b1010;



  // holdData reg for Constant_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Constant_out1
      if (reset) begin
        holdData_i_VALID <= 1'bx;
      end
      else begin
        holdData_i_VALID <= rawData_i_VALID;
      end
    end

  always @(rawData_i_VALID or rdEnb)
    begin : stimuli_Constant_out1_1
      if (rdEnb == 1'b0) begin
        i_VALID_offset <= holdData_i_VALID;
      end
      else begin
        i_VALID_offset <= rawData_i_VALID;
      end
    end

  assign #2 i_VALID_1 = i_VALID_offset;

  // Data source for i_COMPLEX_VALUE_im
  initial
    begin : i_COMPLEX_VALUE_im_fileread
      fp_i_COMPLEX_VALUE_im = $fopen("i_COMPLEX_VALUE_im.dat", "r");
      status_i_COMPLEX_VALUE_im = $rewind(fp_i_COMPLEX_VALUE_im);
    end

  always @(Data_Type_Conversion_out1_addr_delay, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_COMPLEX_VALUE_im <= 32'bx;
      end
      else if (rdEnb == 1) begin
        status_i_COMPLEX_VALUE_im = $fscanf(fp_i_COMPLEX_VALUE_im, "%h", rawData_i_COMPLEX_VALUE_im);
      end
    end

  // holdData reg for Data_Type_Conversion_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion_out1
      if (reset) begin
        holdData_i_COMPLEX_VALUE_im <= 32'bx;
      end
      else begin
        holdData_i_COMPLEX_VALUE_im <= rawData_i_COMPLEX_VALUE_im;
      end
    end

  always @(rawData_i_COMPLEX_VALUE_im or rdEnb)
    begin : stimuli_Data_Type_Conversion_out1_1
      if (rdEnb == 1'b0) begin
        i_COMPLEX_VALUE_im_offset <= holdData_i_COMPLEX_VALUE_im;
      end
      else begin
        i_COMPLEX_VALUE_im_offset <= rawData_i_COMPLEX_VALUE_im;
      end
    end

  assign #2 i_COMPLEX_VALUE_im = i_COMPLEX_VALUE_im_offset;

  assign Data_Type_Conversion_out1_active = Data_Type_Conversion_out1_addr != 4'b1010;



  assign Data_Type_Conversion_out1_enb = Data_Type_Conversion_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge clk or posedge reset)
    begin : DataTypeConversion_process
      if (reset == 1'b1) begin
        Data_Type_Conversion_out1_addr <= 4'b0000;
      end
      else begin
        if (Data_Type_Conversion_out1_enb) begin
          if (Data_Type_Conversion_out1_addr >= 4'b1010) begin
            Data_Type_Conversion_out1_addr <= 4'b0000;
          end
          else begin
            Data_Type_Conversion_out1_addr <= Data_Type_Conversion_out1_addr + 4'b0001;
          end
        end
      end
    end



  assign #1 Data_Type_Conversion_out1_addr_delay = Data_Type_Conversion_out1_addr;

  // Data source for i_COMPLEX_VALUE_re
  initial
    begin : i_COMPLEX_VALUE_re_fileread
      fp_i_COMPLEX_VALUE_re = $fopen("i_COMPLEX_VALUE_re.dat", "r");
      status_i_COMPLEX_VALUE_re = $rewind(fp_i_COMPLEX_VALUE_re);
    end

  always @(Data_Type_Conversion_out1_addr_delay, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_i_COMPLEX_VALUE_re <= 32'bx;
      end
      else if (rdEnb == 1) begin
        status_i_COMPLEX_VALUE_re = $fscanf(fp_i_COMPLEX_VALUE_re, "%h", rawData_i_COMPLEX_VALUE_re);
      end
    end

  // holdData reg for Data_Type_Conversion_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Data_Type_Conversion_out1_2
      if (reset) begin
        holdData_i_COMPLEX_VALUE_re <= 32'bx;
      end
      else begin
        holdData_i_COMPLEX_VALUE_re <= rawData_i_COMPLEX_VALUE_re;
      end
    end

  always @(rawData_i_COMPLEX_VALUE_re or rdEnb)
    begin : stimuli_Data_Type_Conversion_out1_3
      if (rdEnb == 1'b0) begin
        i_COMPLEX_VALUE_re_offset <= holdData_i_COMPLEX_VALUE_re;
      end
      else begin
        i_COMPLEX_VALUE_re_offset <= rawData_i_COMPLEX_VALUE_re;
      end
    end

  assign #2 i_COMPLEX_VALUE_re = i_COMPLEX_VALUE_re_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  CALC_MAGNITUDE_AND_PHASE_FIXED u_CALC_MAGNITUDE_AND_PHASE_FIXED (.clk(clk),
                                                                   .reset(reset),
                                                                   .clk_enable(clk_enable),
                                                                   .i_COMPLEX_VALUE_re(i_COMPLEX_VALUE_re),  // ufix32_En18
                                                                   .i_COMPLEX_VALUE_im(i_COMPLEX_VALUE_im),  // ufix32_En18
                                                                   .i_VALID(i_VALID_1),
                                                                   .ce_out(ce_out),
                                                                   .o_PHASE(o_PHASE),  // ufix16_En13
                                                                   .o_MAGNITUDE(o_MAGNITUDE),  // ufix33_En18
                                                                   .o_VALID(o_VALID)
                                                                   );

  assign o_PHASE_enb = ce_out & o_PHASE_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        o_PHASE_addr <= 4'b0000;
      end
      else begin
        if (o_PHASE_enb) begin
          if (o_PHASE_addr >= 4'b1010) begin
            o_PHASE_addr <= 4'b0000;
          end
          else begin
            o_PHASE_addr <= o_PHASE_addr + 4'b0001;
          end
        end
      end
    end



  assign o_PHASE_lastAddr = o_PHASE_addr >= 4'b1010;



  assign o_PHASE_done = o_PHASE_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (o_PHASE_done_enb) begin
          check1_done <= o_PHASE_done;
        end
      end
    end

  assign snkDone = check3_done & (check1_done & check2_done);



  // Data source for o_PHASE_expected
  assign o_PHASE_expected_1 = 16'b0000000000000000;



  assign o_PHASE_ref = o_PHASE_expected_1;

  always @(posedge clk or posedge reset)
    begin : o_PHASE_checker
      if (reset == 1'b1) begin
        o_PHASE_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && o_PHASE !== o_PHASE_ref) begin
          o_PHASE_testFailure <= 1'b1;
          $display("ERROR in o_PHASE at time %t : Expected '%h' Actual '%h'", $time, o_PHASE_ref, o_PHASE);
        end
      end
    end

  // Data source for o_MAGNITUDE_expected
  assign o_MAGNITUDE_expected_1 = 33'h000000000;



  assign o_MAGNITUDE_ref = o_MAGNITUDE_expected_1;

  always @(posedge clk or posedge reset)
    begin : o_MAGNITUDE_checker
      if (reset == 1'b1) begin
        o_MAGNITUDE_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && o_MAGNITUDE !== o_MAGNITUDE_ref) begin
          o_MAGNITUDE_testFailure <= 1'b1;
          $display("ERROR in o_MAGNITUDE at time %t : Expected '%h' Actual '%h'", $time, o_MAGNITUDE_ref, o_MAGNITUDE);
        end
      end
    end

  // Data source for o_VALID_expected
  assign o_VALID_expected_1 = 1'b0;



  assign o_VALID_ref = o_VALID_expected_1;

  always @(posedge clk or posedge reset)
    begin : o_VALID_checker
      if (reset == 1'b1) begin
        o_VALID_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && o_VALID !== o_VALID_ref) begin
          o_VALID_testFailure <= 1'b1;
          $display("ERROR in o_VALID at time %t : Expected '%h' Actual '%h'", $time, o_VALID_ref, o_VALID);
        end
      end
    end

  assign testFailure = o_VALID_testFailure | (o_PHASE_testFailure | o_MAGNITUDE_testFailure);



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // CALC_MAGNITUDE_AND_PHASE_FIXED_tb

